spring:
  application:
    name: springboot-kafka-avro
  kafka:
#    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
#      value-serializer: com.example.demo.demokafka.config.KafkaEventSerializer
    listener:
      missing-topics-fatal: false

app:
  kafka:
    retry:
      topic:
        main:
          timems: ${KAFKA_RETRY_TIMEMS_MAIN_TOPIC:0}
          max: ${KAFKA_RETRY_MAX_MAIN_TOPIC:0}
        retry:
          timems: ${KAFKA_RETRY_TIMEMS:10000}
          max: ${KAFKA_RETRY_MAX:1}
    my-consumer:
      enabled: true
      topic:
        main: test_main_topic
        retry: test_retry_topic
        error: test_dlt_topic
      auto-offset-reset: latest
      bootstrap-servers: localhost:9092
      client-id: test-client-id
      group-id: test-group-id
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      max-poll-records: 5
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        deserializer-key-delegate-class: org.apache.kafka.common.serialization.StringDeserializer
        deserializer-value-delegate-class: io.confluent.kafka.serializers.KafkaAvroDeserializer
#        deserializer-value-delegate-class: com.example.demo.demokafka.config.KafkaEventDeserializer
        json-trusted-packages: '"*"'
#        value-deserializer-specific-avro-reader: true
      schema-registry:
        url: http://localhost:${wiremock.server.port}/


logging:
  level:
    root: info